@model PaymentInfoModel

@using Nop.Plugin.Payments.Square
@using Nop.Plugin.Payments.Square.Models
@inject SquarePaymentSettings squarePaymentSettings
@inject Nop.Core.Domain.Orders.OrderSettings orderSettings

@{
    Layout = "";
    Html.AddScriptParts(ResourceLocation.Footer,
        squarePaymentSettings.UseSandbox ? SquarePaymentDefaults.SandboxPaymentFormScriptPath : SquarePaymentDefaults.PaymentFormScriptPath,
        excludeFromBundle: true);
}

<style type="text/css">
    select.square-input {
        height: 36px;
        border: 1px solid #ddd;
        padding: 8px;
        vertical-align: middle;
        color: #777;
        width: 100%;
    }
</style>

<script asp-location="Footer">
    const cardButton = $('input.payment-info-next-step-button')[0];

    $(document).ready(async function () {
        $('#@Html.IdFor(model => model.StoredCardId)').on('change', toggleStoredCard);
        toggleStoredCard();

        if (!window.Square) {
            throw new Error('Square.js failed to load properly');
        }

        const cardClassSelectors = {
            'input': {
                fontSize: '15px',
            },
            'input.is-focus': {
                color: '#444',
            },
            '.input-container': {
                borderColor: '#ddd',
                borderWidth: '1px',
            },
            '.input-container.is-focus': {
                borderColor: '#ccc',
            },
            '.input-container.is-error': {
                borderColor: '#e4434b',
            },
        }

        const appId = '@squarePaymentSettings.ApplicationId';
        const locationId = '@squarePaymentSettings.LocationId';

        var submitForm = false;
        var onePageCheckout = @orderSettings.OnePageCheckoutEnabled.ToString().ToLower();
        var use3ds = @squarePaymentSettings.Use3ds.ToString().ToLower();
        $('.payment-info-next-step-button').attr('onclick', null);
        cardButton.disabled = true;

        async function initializeCard(payments) {
            const card = await payments.card({ 'style': cardClassSelectors, 'postalCode': '@Model.PostalCode', });
            await card.attach('#card-container');
            return card;
        }

        async function tokenize(paymentMethod) {
            const tokenResult = await paymentMethod.tokenize();
            if (tokenResult.status === 'OK') {
                return tokenResult.token;
            } else {
                let errorMessage = `Tokenization failed-status: ${tokenResult.status}`;
                if (tokenResult.errors) {
                    errorMessage += ` and errors: ${JSON.stringify(
                        tokenResult.errors
                    )}`;
                }
                throw new Error(errorMessage);
            }
        }

        async function handlePaymentMethodSubmission(event, paymentMethod) {
            event.preventDefault();

            try {
                // disable the submit button as we await tokenization and make a
                // payment request.
                cardButton.disabled = true;
                const token = await tokenize(paymentMethod);
                //const paymentResults = await createPayment(token);

                if (token.errors) {
                    var currentErrorvalue = $('#@Html.IdFor(model => model.Errors)').val();
                    $('#@Html.IdFor(model => model.Errors)').val(currentErrorvalue + '|' + token.errors.message);
                    card.destroy();
                    card = null;
                    submitForm = true;
                    save_data();
                } else if (use3ds) {
                    $('#@Html.IdFor(model => model.CardNonce)').val(token);
                    verifyBuyer(payments, token);
                }
                else {
                    $('#@Html.IdFor(model => model.CardNonce)').val(token);
                    submitForm = true;
                    save_data();
                }

            } catch (e) {
                cardButton.disabled = false;

                var currentErrorvalue = $('#@Html.IdFor(model => model.Errors)').val();
                $('#@Html.IdFor(model => model.Errors)').val(currentErrorvalue + '|' + e);
                card.destroy();
                card = null;
                submitForm = true;
                save_data();
            }
        }

        const payments = window.Square.payments(appId, locationId);
        let card;
        try {
            card = await initializeCard(payments);
        } catch (e) {
            console.error('Initializing Card failed', e);
            return;
        }

        cardButton.disabled = false;

        $('.payment-info-next-step-button').on('click', async function (event) {
            if (!submitForm) {
                if (card) {
                    var selectedStoredCardId = $('#@Html.IdFor(model => model.StoredCardId)').val();
                    if ((!selectedStoredCardId || selectedStoredCardId == '@(Guid.Empty.ToString())')) {
                        await handlePaymentMethodSubmission(event, card);
                        return false;
                    } else if (use3ds) {
                        verifyBuyer(payments, selectedStoredCardId);
                        return false;
                    } else if (onePageCheckout) {
                        PaymentInfo.save();
                    }
                }
            }
            else if (onePageCheckout) {
                submitForm = false;
                PaymentInfo.save();
            }
        });

        function save_data() {
            if (onePageCheckout) {
                submitForm = false;
                PaymentInfo.save();
            }
        }

        $(document).on('accordion_section_opened', function (data) {
            if (data.currentSectionId != 'opc-confirm_order' && data.currentSectionId != 'opc-payment_info') {
                if (card) {
                    card.destroy();
                    card = null;
                }
                $('.payment-info-next-step-button').attr('onclick', 'PaymentInfo.save()');
            }
            if (data.currentSectionId == 'opc-payment_info' && data.previousSectionId == 'opc-confirm_order') {
                $('.payment-info-next-step-button').attr('onclick', null);
            }
        });

        async function verifyBuyer(payments, token) {
            const verificationDetails = {
                intent: 'CHARGE',
                amount: '@Model.OrderTotal',
                currencyCode: '@Model.Currency',
                billingContact: {                    
                    givenName: '@Model.BillingFirstName',
                    familyName: '@Model.BillingLastName',
                    email: '@Model.BillingEmail',
                    country: '@Model.BillingCountry',
                    region: '@Model.BillingState',
                    city: '@Model.BillingCity',
                    postalCode: '@Model.BillingPostalCode'
                }
            };

            const verificationResults = await payments.verifyBuyer(
                token,
                verificationDetails
            );

            $('#@Html.IdFor(model => model.Token)').val(verificationResults.token);
            submitForm = true;
            save_data();
        }

    });

    function toggleStoredCard() {
        var selectedStoredCardId = $('#@Html.IdFor(model => model.StoredCardId)').val();
        if (!selectedStoredCardId || selectedStoredCardId == '@(Guid.Empty.ToString())') {
            $('#payment-form').show();
        } else {
            $('#payment-form').hide();
        }
    }
</script>

<input type="hidden" asp-for="CardNonce">
<input type="hidden" asp-for="Errors">
<input type="hidden" asp-for="Token">

@if (!Model.IsGuest && Model.StoredCards.Any())
{
    <table width="100%" cellspacing="2" cellpadding="1" border="0">
        <tr>
            <td>
                <label asp-for="StoredCardId">@T("Plugins.Payments.Square.Fields.StoredCard"):</label>
            </td>
            <td>
                <select asp-for="StoredCardId" asp-items="Model.StoredCards" class="square-input"></select>
            </td>
        </tr>
    </table>
}

<form id="payment-form">
    <div id="card-container"></div>
</form>
<div id="payment-status-container"></div>

@if (!Model.IsGuest)
{
    <table width="100%" cellspacing="2" cellpadding="1" border="0" id="square-card-details">
        <tr>
            <td>
                <label asp-for="SaveCard">@T("Plugins.Payments.Square.Fields.SaveCard"):</label>
            </td>
            <td>
                <input type="checkbox" asp-for="SaveCard" />
                <span asp-validation-for="SaveCard"></span>
            </td>
        </tr>
    </table>
}


@if (orderSettings.OnePageCheckoutEnabled)
{
    @Html.NopInlineScripts(ResourceLocation.Footer);
}